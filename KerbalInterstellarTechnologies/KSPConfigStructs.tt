<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\bin\Debug\net48\KerbalInterstellarTechnologies.dll" #>
<#@ assembly name="$(SolutionDir)\bin\Debug\net48\Assembly-CSharp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>

/*

            uuuuuuuuuuuuuuuuuuuu
          u" uuuuuuuuuuuuuuuuuu "u
        u" u$$$$$$$$$$$$$$$$$$$$u "u
      u" u$$$$$$$$$$$$$$$$$$$$$$$$u "u
    u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
  u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
$ $$$" ... "$...  ...$" ... "$$$  ... "$$$ $
$ $$$u `"$$$$$$$  $$$  $$$$$  $$  $$$  $$$ $
$ $$$$$$uu "$$$$  $$$  $$$$$  $$  """ u$$$ $
$ $$$""$$$  $$$$  $$$u "$$$" u$$  $$$$$$$$ $
$ $$$$....,$$$$$..$$$$$....,$$$$..$$$$$$$$ $
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
"u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
  "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
    "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
      "u "$$$$$$$$$$$$$$$$$$$$$$$$" u"
        "u "$$$$$$$$$$$$$$$$$$$$" u"
          "u """""""""""""""""" u"
            """"""""""""""""""""



DO NOT EDIT THIS FILE. IT IS GENERATED AUTOMATICALLY.
YOUR CHANGES WILL BE LOST. INSTEAD, EDIT KSPConfigStructs.tt
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

<#
	var types = typeof(KerbalInterstellarTechnologies.KerbalismResourceInterface).Assembly.GetTypes();

    string[] stopFields = { "isEnabled", "moduleName" };

    foreach (var type in types) {
        if(type.Namespace == null || type.Namespace == "") continue;
        if(type.IsClass == false) continue;
        var fields = type.GetFields();
        bool foundKSPFieldAttribute = false;


        foreach (var f in fields) {
            object[] attrs = f.GetCustomAttributes(true);
            foreach (var a in attrs) {
                KSPField almost_there = a as KSPField;
                if(almost_there != null) {
                    foundKSPFieldAttribute = true;
                    break;
                }
            }
            if(foundKSPFieldAttribute == true) break;
        }

        if(foundKSPFieldAttribute == false) continue;
#>
namespace <#= type.Namespace #>
{
    public class <#= type.Name #>Config {
        private <#= type.Name #> _<#= type.Name #>;
        public <#= type.Name #>Config(<#= type.Name #> p = null) {
            _<#= type.Name #> = p;
        }
        
        <# var stopProcessing = false;
        foreach (var f in fields) { 
            foreach(var stupid in stopFields) if(stupid == f.Name) stopProcessing = true;
            if (stopProcessing) break; #>
private <#= f.FieldType #> _<#= f.Name #>;
        public <#= f.FieldType #> <#= f.Name #> {
            get {
                if (_<#= type.Name #> == null) return _<#= f.Name #>;
                return _<#= type.Name #>.<#= f.Name #>;
            }
            set {
                if (_<#= type.Name #> == null) { _<#= f.Name #> = value; return; };
                _<#= type.Name #>.<#= f.Name #> = value;
            }
        }
        // Field: <#= f #> <#= f.Name #> 
        <# } #>

    }
}
<# } #>

